class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        vector<vector<int>> adj(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i==j)
                    continue;
                if(graph[i][j]==1){
                    adj[i].push_back(j);
                }
            }
        }

        unordered_set<int> init(initial.begin(),initial.end());
        unordered_map<int,vector<pair<int,int>>> mp;
        for(int i=0;i<initial.size();i++){
            vector<int> visited(n);
            int mainInfected=initial[i];
            visited[mainInfected]=1;
            for(int j=0;j<adj[mainInfected].size();j++){
                int startNode=adj[mainInfected][j];
                if(visited[startNode]!=1){
                    int countInfected=0;
                    int totalCount=0;
                    dfs(adj,startNode,visited,countInfected,totalCount,init);
                    mp[mainInfected].push_back({countInfected,totalCount});
                }
            }
        }
        // for(auto [a,b]:mp){
        //     cout<<a<<" -> ";
        //     for(int i=0;i<b.size();i++){
        //         cout<<b[i].first<<" "<<b[i].second<<endl;
        //     }
        // }
        sort(initial.begin(),initial.end());
        int val=INT_MIN;
        int ans=initial[0];
        for(auto inf:initial){
            int subVal=0;
            for(auto i:mp[inf]){
                if(i.first==0){
                    subVal+=i.second;
                }
            }
            if(subVal>val){
                val=subVal;
                ans=inf;
            }
        }
        return ans;
    }

    void dfs(vector<vector<int>>& adj,int node,vector<int>& visited,int& countInfected,int& totalCount,unordered_set<int>& init){
        visited[node]=1;
        if(init.find(node)!=init.end()){
            countInfected++;
        }
        totalCount++;
        for(int i=0;i<adj[node].size();i++){
            int nei=adj[node][i];
            if(visited[nei]!=1){
                dfs(adj,nei,visited,countInfected,totalCount,init);
            }
        }
        return;
    }
};